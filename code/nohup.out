
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> install.packages("auteur_0.12.1010.tar.gz", repos=NULL, type="source")
Installing package(s) into ‘/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15’
(as ‘lib’ is unspecified)
* installing *source* package ‘auteur’ ...
** package ‘auteur’ successfully unpacked and MD5 sums checked
** libs
g++ -I/usr/share/R/include -DNDEBUG   -I"/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/Rcpp/include"   -fpic  -O2 -pipe -g  -c oumat.cpp -o oumat.o
g++ -I/usr/share/R/include -DNDEBUG   -I"/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/Rcpp/include"   -fpic  -O2 -pipe -g  -c ouweights.cpp -o ouweights.o
gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG   -I"/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/Rcpp/include"   -fpic  -O2 -pipe -g  -c pic_variance.c -o pic_variance.o
g++ -I/usr/share/R/include -DNDEBUG   -I"/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/Rcpp/include"   -fpic  -O2 -pipe -g  -c vmat.cpp -o vmat.o
g++ -shared -o auteur.so oumat.o ouweights.o pic_variance.o vmat.o -L/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/Rcpp/lib -lRcpp -Wl,-rpath,/home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/Rcpp/lib -L/usr/lib/R/lib -lR
installing to /home/carlosp420/R/x86_64-pc-linux-gnu-library/2.15/auteur/libs
** R
** data
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded

* DONE (auteur)
> library(turboMEDUSA)
Loading required package: ape
Loading required package: geiger
Loading required package: MASS
Loading required package: mvtnorm
Loading required package: msm
Loading required package: subplex
Loading required package: deSolve
Loading required package: colorspace
Loading required package: digest
Loading required package: Rcpp
Loading required package: coda
Loading required package: lattice
Loading required package: ncbit

Attaching package: ‘geiger’

The following object(s) are masked from ‘package:ape’:

    drop.tip, vcv.phylo

The following object(s) are masked from ‘package:base’:

    load, transform

Loading required package: multicore

Attaching package: ‘multicore’

The following object(s) are masked from ‘package:lattice’:

    parallel

> library(ape)
> library(auteur)

Attaching package: ‘auteur’

The following object(s) are masked from ‘package:geiger’:

    hdr, is.root, rjmcmc.bm

> library(phytools)
Loading required package: mnormt
Loading required package: rgl

Attaching package: ‘phytools’

The following object(s) are masked from ‘package:auteur’:

    phenogram

Warning messages:
1: replacing previous import ‘as.igraph’ when loading ‘igraph’ 
2: replacing previous import ‘edges’ when loading ‘igraph’ 
> library(reshape)
Loading required package: plyr

Attaching package: ‘reshape’

The following object(s) are masked from ‘package:plyr’:

    rename, round_any

> 
> # clear workspace
> 
> rm(list=ls())
> 
> # read in trees
> 
> dfg <- read.nexus(file="../data/supp_mat_02_1000_random_trees_no_outgroups.nex"); # trees from MrBayes run
> tax <- read.csv(file="../data/supp_mat_03_richness.csv"); # two column dataframe of genera (match tip.lables) and species richness
> mct <- read.nexus("../data/supp_mat01_genus.nex"); # mct is the maximum credibility tree
> 
> # subset dfg for testing purposes, replace with
> # dfg <- dfg[1:1000]
> 
> dfg <- dfg[1:2]
> 
> # get list of all clades in mct
> 
> mct.clades.names <- list()
> mct.clades.nums <- prop.part(mct)
> for (i in 1:length(mct.clades.nums)) {
+   mct.clades.names[[i]] <- mct$tip.label[unlist(mct.clades.nums[i])]
+ }
> 
> # number of models to consider
> 
> model.limit <- 25
> 
> # these matrices 'hold' the results
> 
> tip.dataset <- matrix(ncol=5)
> colnames(tip.dataset) <- c("tree.rep", "index", "r", "epsilon", "lnLik.part")
> tip.row <- matrix(ncol=5)
> colnames(tip.row) <- c("tree.rep", "index", "r", "epsilon", "lnLik.part")
> clade.dataset <- matrix(ncol=5)
> colnames(clade.dataset) <- c("tree.rep", "index", "r", "epsilon", "lnLik.part")
> clade.row <- matrix(ncol=5)
> colnames(clade.row) <- c("tree.rep", "index", "r", "epsilon", "lnLik.part")
> 
> # loop through all 1000 trees
> 
> for (tree.rep in 1:length(dfg)) {
+   
+   phy <- dfg[[tree.rep]]
+   
+   cat("
+ \n##############################################
+ ## Now analyzing tree ", tree.rep, "of", length(dfg), "total trees
+ ##############################################\n
+       ")
+   
+   res <- runTurboMEDUSA(phy = phy,
+                  richness = tax,
+                  model.limit = model.limit,
+                  mc = TRUE,
+                  num.cores=3,
+                  stop = "model.limit",
+                  initial.r = 0.05,
+                  initial.e = 0.5)
+   
+   # need to find cutoff for each model to determine the number of split.at clades
+  
+   model.aicc <- c()
+   for (i in 1:model.limit) {
+     model.aicc[i] <- res$models[[i]]$aicc
+   }
+   
+   arbitrary.threshold <- -7.803831 # decrease in information theoretic score (see suppl. of Alfaro et al. in PNAS)
+   model.num <- min(c(1:model.limit)[diff(model.aicc) > arbitrary.threshold]) # select model using 'threshold' index from above
+ 
+   # get data for 
+   
+   model.data <- res$models[[model.num]]
+   
+   # get descendants of each split.node
+   
+   split.tip.labels <- c()
+   
+   for (i in 1:model.num) { # the first split is actually the whole tree
+     node <- model.data$split.at[i]
+     if (node < 399) { # if the node subtends a terminal tip
+       split.tips <- node
+       
+       # the clade exists in MCT since it is a single lineage
+       index <- match(phy$tip.label[split.tips], mct$tip)
+       tip.row[1,1] <- tree.rep
+       tip.row[1,2] <- index # this number is the index for mct$tp
+       tip.row[1,3] <- model.data$par[i, 1]
+       tip.row[1,4] <- model.data$par[i, 2]
+       tip.row[1,5] <- model.data$lnLik.part[i]
+       tip.dataset <- rbind(tip.row, tip.dataset)
+     }
+     
+     else {
+       split.descendants <- getDescendants(phy, node = node) # get the descendants of the split node
+       split.tips <- c(split.descendants)[split.descendants < 399] # select only the tips
+       split.tip.labels <- phy$tip.label[split.tips] # convert the numerical tip names to tip labels
+       
+       # test whether the split clade exists in the mct
+       for (j in 1:length(mct.clades.names)) { # see mct.clades.names above
+         if (identical(sort(split.tip.labels), sort(mct.clades.names[[j]]))) {
+           clade.row[1,1] <- tree.rep
+           clade.row[1,2] <- j # this number is the index for mct.clades.names
+           clade.row[1,3] <- model.data$par[i, 1]
+           clade.row[1,4] <- model.data$par[i, 2]
+           clade.row[1,5] <- model.data$lnLik.part[i]
+           clade.dataset <- rbind(clade.row, clade.dataset)
+         }
+       }     
+     }
+   }
+ }


##############################################
## Now analyzing tree  1 of 2 total trees
##############################################

      
Limiting consideration to 25 piecewise BD models

Appropriate AICc threshold for tree of 398 tips is: 7.803831.

Preparing data for analysis... done.
Optimizing parameters for pendant edges... done.
Pre-calculating parameters for virgin internal nodes... done.

Step 1 (of 25): best likelihood = -2716.335; AICc = 5436.684
Step 2 (of 25): best likelihood = -2683.497; AICc = 5377.069; break at node 454
Step 3 (of 25): best likelihood = -2659.454; AICc = 5335.092; break at node 391
Step 4 (of 25): best likelihood = -2644.701; AICc = 5311.739; break at node 653
Step 5 (of 25): best likelihood = -2629.764; AICc = 5288.067; break at node 415
Step 6 (of 25): best likelihood = -2613.18; AICc = 5261.147; break at node 82
Step 7 (of 25): best likelihood = -2596.274; AICc = 5233.632; break at node 666
Step 8 (of 25): best likelihood = -2579.25; AICc = 5205.933; break at node 446
Step 9 (of 25): best likelihood = -2567.583; AICc = 5188.995; break at node 555
Step 10 (of 25): best likelihood = -2557.156; AICc = 5174.586; break at node 361
Step 11 (of 25): best likelihood = -2548.233; AICc = 5163.238; break at node 691
Step 12 (of 25): best likelihood = -2540.646; AICc = 5154.611; break at node 585
Step 13 (of 25): best likelihood = -2533.701; AICc = 5147.323; break at node 93
Step 14 (of 25): best likelihood = -2526.927; AICc = 5140.427; break at node 205
Step 15 (of 25): best likelihood = -2520.184; AICc = 5133.649; break at node 303
Step 16 (of 25): best likelihood = -2511.391; AICc = 5122.823; break at node 744
Step 17 (of 25): best likelihood = -2505; AICc = 5116.854; break at node 603
Step 18 (of 25): best likelihood = -2499.118; AICc = 5111.961; break at node 467
Step 19 (of 25): best likelihood = -2491.478; AICc = 5103.607; break at node 477
Step 20 (of 25): best likelihood = -2485.907; AICc = 5099.448; break at node 458
Step 21 (of 25): best likelihood = -2480.494; AICc = 5095.66; break at node 332
Step 22 (of 25): best likelihood = -2475.248; AICc = 5092.265; break at node 425
Step 23 (of 25): best likelihood = -2470.37; AICc = 5089.666; break at node 337
Step 24 (of 25): best likelihood = -2465.557; AICc = 5087.256; break at node 300
Step 25 (of 25): best likelihood = -2460.777; AICc = 5084.97; break at node 623

Model fit summary:

   N.Models Break.Node    Ln.Lik N.Param      aic        w.aic     aicc
1         1         NA -2716.335       2 5436.669 1.593875e-80 5436.684
2         2        454 -2683.497       5 5376.993 1.448610e-67 5377.069
3         3        391 -2659.454       8 5334.908 1.992962e-58 5335.092
4         4        653 -2644.701      11 5311.402 2.534639e-53 5311.739
5         5        415 -2629.764      14 5287.529 3.871205e-48 5288.067
6         6         82 -2613.180      17 5260.360 3.072865e-42 5261.147
7         7        666 -2596.274      20 5232.547 3.364928e-36 5233.632
8         8        446 -2579.250      23 5204.501 4.141292e-30 5205.933
9         9        555 -2567.583      26 5187.167 2.405567e-26 5188.995
10       10        361 -2557.156      29 5172.311 4.046319e-23 5174.586
11       11        691 -2548.233      32 5160.467 1.510274e-20 5163.238
12       12        585 -2540.646      35 5151.291 1.484159e-18 5154.611
13       13         93 -2533.701      38 5143.403 7.664155e-17 5147.323
14       14        205 -2526.927      41 5135.853 3.340173e-15 5140.427
15       15        303 -2520.184      44 5128.369 1.409240e-13 5133.649
16       16        744 -2511.391      47 5116.782 4.623546e-11 5122.823
17       17        603 -2505.000      50 5109.999 1.373855e-09 5116.854
18       18        467 -2499.118      53 5104.237 2.450393e-08 5111.961
19       19        477 -2491.478      56 5094.957 2.537487e-06 5103.607
20       20        458 -2485.907      59 5089.815 3.318050e-05 5099.448
21       21        332 -2480.494      62 5084.988 3.707622e-04 5095.660
22       22        425 -2475.248      65 5080.496 3.503585e-03 5092.265
23       23        337 -2470.370      68 5076.740 2.290874e-02 5089.666
24       24        300 -2465.557      71 5073.115 1.403778e-01 5087.256
25       25        623 -2460.777      74 5069.554 8.328034e-01 5084.970
         w.aicc
1  2.924708e-77
2  2.578438e-64
3  3.362287e-55
4  3.959317e-50
5  5.468135e-45
6  3.832014e-39
7  3.616018e-33
8  3.742137e-27
9  1.783051e-23
10 2.399248e-20
11 6.984208e-18
12 5.217180e-16
13 1.995389e-14
14 6.273646e-13
15 1.859371e-11
16 4.171473e-09
17 8.248025e-08
18 9.522648e-07
19 6.207410e-05
20 4.967037e-04
21 3.300579e-03
22 1.801799e-02
23 6.609322e-02
24 2.205569e-01
25 6.914715e-01


##############################################
## Now analyzing tree  2 of 2 total trees
##############################################

      
Limiting consideration to 25 piecewise BD models

Appropriate AICc threshold for tree of 398 tips is: 7.803831.

Preparing data for analysis... done.
Optimizing parameters for pendant edges... done.
Pre-calculating parameters for virgin internal nodes... done.

Step 1 (of 25): best likelihood = -2735.359; AICc = 5474.733
Step 2 (of 25): best likelihood = -2700.991; AICc = 5412.058; break at node 454
Step 3 (of 25): best likelihood = -2679.153; AICc = 5374.489; break at node 391
Step 4 (of 25): best likelihood = -2662.163; AICc = 5346.663; break at node 653
Step 5 (of 25): best likelihood = -2647.077; AICc = 5322.693; break at node 82
Step 6 (of 25): best likelihood = -2630.226; AICc = 5295.239; break at node 415
Step 7 (of 25): best likelihood = -2612.517; AICc = 5266.118; break at node 667
Step 8 (of 25): best likelihood = -2596.442; AICc = 5240.316; break at node 446
Step 9 (of 25): best likelihood = -2586.034; AICc = 5225.897; break at node 553
Step 10 (of 25): best likelihood = -2576.017; AICc = 5212.308; break at node 361
Step 11 (of 25): best likelihood = -2567.258; AICc = 5201.287; break at node 585
Step 12 (of 25): best likelihood = -2559.052; AICc = 5191.424; break at node 93
Step 13 (of 25): best likelihood = -2551.991; AICc = 5183.902; break at node 748
Step 14 (of 25): best likelihood = -2544.532; AICc = 5175.638; break at node 303
Step 15 (of 25): best likelihood = -2535.518; AICc = 5164.316; break at node 708
Step 16 (of 25): best likelihood = -2528.777; AICc = 5157.594; break at node 603
Step 17 (of 25): best likelihood = -2522.401; AICc = 5151.657; break at node 467
Step 18 (of 25): best likelihood = -2513.519; AICc = 5140.762; break at node 477
Step 19 (of 25): best likelihood = -2507.331; AICc = 5135.312; break at node 458
Step 20 (of 25): best likelihood = -2501.424; AICc = 5130.481; break at node 205
Step 21 (of 25): best likelihood = -2495.592; AICc = 5125.856; break at node 589
Step 22 (of 25): best likelihood = -2489.481; AICc = 5120.731; break at node 243
Step 23 (of 25): best likelihood = -2483.991; AICc = 5116.907; break at node 425
Step 24 (of 25): best likelihood = -2478.643; AICc = 5113.427; break at node 332
Step 25 (of 25): best likelihood = -2473.588; AICc = 5110.593; break at node 337

Model fit summary:

   N.Models Break.Node    Ln.Lik N.Param      aic        w.aic     aicc
1         1         NA -2735.359       2 5474.718 3.357546e-83 5474.733
2         2        454 -2700.991       5 5411.982 1.409413e-69 5412.058
3         3        391 -2679.153       8 5374.306 2.139587e-61 5374.489
4         4        653 -2662.163      11 5346.326 2.547123e-55 5346.663
5         5         82 -2647.077      14 5322.155 4.516600e-50 5322.693
6         6        415 -2630.226      17 5294.452 4.682143e-44 5295.239
7         7        667 -2612.517      20 5265.033 1.144437e-37 5266.118
8         8        446 -2596.442      23 5238.884 5.455665e-32 5240.316
9         9        553 -2586.034      26 5224.069 8.992312e-29 5225.897
10       10        361 -2576.017      29 5210.033 1.003921e-25 5212.308
11       11        585 -2567.258      32 5198.515 3.182427e-23 5201.287
12       12         93 -2559.052      35 5188.104 5.801855e-21 5191.424
13       13        748 -2551.991      38 5179.982 3.367408e-19 5183.902
14       14        303 -2544.532      41 5171.064 2.908291e-17 5175.638
15       15        708 -2535.518      44 5159.036 1.189890e-14 5164.316
16       16        603 -2528.777      47 5151.553 5.016278e-13 5157.594
17       17        467 -2522.401      50 5144.802 1.467212e-11 5151.657
18       18        477 -2513.519      53 5133.038 5.260381e-09 5140.762
19       19        458 -2507.331      56 5126.662 1.274938e-07 5135.312
20       20        205 -2501.424      59 5120.849 2.332639e-06 5130.481
21       21        589 -2495.592      62 5115.184 3.961448e-05 5125.856
22       22        243 -2489.481      65 5108.961 8.894544e-04 5120.731
23       23        425 -2483.991      68 5103.981 1.072930e-02 5116.907
24       24        332 -2478.643      71 5099.286 1.122586e-01 5113.427
25       25        337 -2473.588      74 5095.176 8.760806e-01 5110.593
         w.aicc
1  6.556327e-80
2  2.669647e-66
3  3.841280e-58
4  4.234130e-52
5  6.789142e-47
6  6.213532e-41
7  1.308751e-34
8  5.246164e-29
9  7.092965e-26
10 6.334679e-23
11 1.566139e-20
12 2.170363e-18
13 9.329737e-17
14 5.812985e-15
15 1.670698e-12
16 4.816217e-11
17 9.373727e-10
18 2.175452e-07
19 3.318989e-06
20 3.715970e-05
21 3.752830e-04
22 4.867743e-03
23 3.294106e-02
24 1.876947e-01
25 7.740805e-01
> tip.dataset <- as.data.frame(tip.dataset)
> clade.dataset <- as.data.frame(clade.dataset)
> 
> tip.dataset <- tip.dataset[1:nrow(tip.dataset)-1,]
> clade.dataset <- clade.dataset[1:nrow(clade.dataset)-1,]
> 
> # combine the datsets and add a column indicating whether the clade is a tip
> 
> tip.dataset$tip <- "y"
> clade.dataset$tip <- "n"
> 
> d <- rbind(tip.dataset, clade.dataset)
> d.m <- melt(d, id=c("index", "tip"))
> d.c.length <- cast(d.m, index + tip ~ variable, length)
> d.c.mean <- cast(d.m, index + tip ~ variable, mean)
> d.c.sd <- cast(d.m, index + tip ~ variable, sd)
> 
> output <- cbind(d.c.length[1:3], d.c.mean[4], d.c.sd[4], d.c.mean[5], d.c.sd[5], d.c.mean[6], d.c.sd[6])
> names(output) <- c("index", "tip", "sample size (N)", "r (mean)", "r (sd)", "epsilon (mean)", "epsilon (sd)","lnlik (mean)","lnlik (sd)")
> 
> output
   index tip sample size (N)   r (mean)       r (sd) epsilon (mean)
1      1   n               2 0.07900757 0.0026222603   2.896894e-01
2     14   n               2 0.18067425 0.0058165007   3.191740e-01
3     48   n               2 0.06523140 0.0004605418   9.350490e-01
4     56   n               2 0.05234641 0.0026031082   9.500017e-01
5     82   y               2 0.23863650 0.0027435671   5.415564e-01
6     93   y               1 0.20242473           NA   5.358751e-01
7    154   n               2 0.20714842 0.0026411262   1.270007e-06
8    193   n               2 0.20198163 0.0110914372   1.008979e-05
9    231   n               1 0.12895190           NA   1.778983e-06
10   232   n               1 0.12948878           NA   1.244035e-01
11   254   n               1 0.07350987           NA   9.565801e-01
12   343   n               2 0.16153266 0.0188366020   4.419120e-01
13   361   y               2 0.31790506 0.0214239469   5.960742e-01
14   391   y               2 0.31005050 0.0013151727   5.970010e-01
   epsilon (sd) lnlik (mean)   lnlik (sd)
1  3.493906e-02 -1261.820414 3.803357e+00
2  3.725336e-02  -144.888276 9.749223e-02
3  5.765044e-04   -45.507155 4.375517e-02
4  5.480572e-03  -418.501179 2.178175e+00
5  1.298392e-02    -6.260095 5.944409e-09
6            NA    -4.795468           NA
7  1.090573e-06   -41.443047 8.446355e-02
8  1.419250e-05   -11.266687 2.418479e-01
9            NA  -526.674372           NA
10           NA  -542.859414           NA
11           NA   -12.185508           NA
12 2.952769e-01   -66.400134 6.296197e-01
13 4.464367e-02    -4.198604 3.584169e-08
14 2.610218e-02    -6.305788 1.477135e-08
> write.table(output, file="raw_data_summary.csv", row.names=FALSE)
> cat("\nThe output variable contains a summary of the statistics from 
+       turboMEDUSA on the processed trees. It was saved into file\"raw_data_summary.csv\"\n")

The output variable contains a summary of the statistics from 
      turboMEDUSA on the processed trees. It was saved into file"raw_data_summary.csv"
> 
> cat("\nThe raw data was written to the file \"raw_data.csv\"\n")

The raw data was written to the file "raw_data.csv"
> write.table(d, file="raw_data.csv", row.names=FALSE)
> 
> cat("\n
+ ##############################################
+ ## Use the index number to identify the taxa in each clade.
+ ##
+ ## If the clade is a tip (i.e., tip = y),
+ ## type:  mct$tip['insert index value her']
+ ##
+ ## If the clade is not a tip (i.e., tip = n),
+ ## type:  mct.clades.names[['insert index value her']]
+ ##
+ ## In both cases, a string of taxon names will be returned.
+ ##############################################\n
+     ")


##############################################
## Use the index number to identify the taxa in each clade.
##
## If the clade is a tip (i.e., tip = y),
## type:  mct$tip['insert index value her']
##
## If the clade is not a tip (i.e., tip = n),
## type:  mct.clades.names[['insert index value her']]
##
## In both cases, a string of taxon names will be returned.
##############################################

    > 

R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Error: unexpected symbol in "R version"
Execution halted

R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Error: unexpected symbol in "R version"
Execution halted

R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ape)
> 
> ## Generate a set of 1000 trees
> # each set will be the random 1000 trees minus one,
> # that should be replaced by the MCT tree.
> # The idea is incrementally "improve" the set of trees,
> # so that the nodes with high posterior probabilities will 
> # increase in number in the MCT tree of each set.
> 
> # In this way, we can test whether the failure to recover
> # most of the splits of the MCT on more than 95% of the trees
> # from the posterior is due to having nodes with low 
> # posterior probability.
> # This will be useful for answering the Asociate Editor and Reviewer 3 in part.
> 
> ## TODO:
> # get mct for each set
> # test if the percentage of nodes recovered in set improves
> # test if this might also be influenced by having narrower confidence intervals
> # but how???
> 
> # read original set of 1000 trees
> mct <- read.nexus("../data/supp_mat01_genus.nex")
> orig_set <- read.nexus("../data/supp_mat_02_1000_random_trees_no_outgroups.nex")
> 
> for( i in 1:1000 ) {
+     # drop i
+     j <- i + 1
+     set <- orig_set[j:1000]
+     
+     # append mct
+     set[[1000]] <- mct
+     
+     # save set as set_i.nex
+     write.nexus(set, file=paste0("set_", i, ".nex", sep=""))
+ }

R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ape)
> 
> ## Generate a set of 1000 trees
> # each set will be the random 1000 trees minus one,
> # that should be replaced by the MCT tree.
> # The idea is incrementally "improve" the set of trees,
> # so that the nodes with high posterior probabilities will 
> # increase in number in the MCT tree of each set.
> 
> # In this way, we can test whether the failure to recover
> # most of the splits of the MCT on more than 95% of the trees
> # from the posterior is due to having nodes with low 
> # posterior probability.
> # This will be useful for answering the Asociate Editor and Reviewer 3 in part.
> 
> ## TODO:
> # get mct for each set
> # test if the percentage of nodes recovered in set improves
> # test if this might also be influenced by having narrower confidence intervals
> # but how???
> 
> # read original set of 1000 trees
> mct <- read.nexus("../data/supp_mat01_genus.nex")
> orig_set <- read.nexus("../data/supp_mat_02_1000_random_trees_no_outgroups.nex")
> 
> for( i in 1:1000 ) {
+     # drop i
+     j <- i + 1
+     set <- orig_set[j:1000]
+     
+     # append mct
+     k <- i
+     while( k > 0 ) {
+         end <- 1001 - k
+         set[[end]] <- mct
+         k <- k - 1
+     }
+     
+     # save set as set_i.nex
+     write.nexus(set, file=paste0("set_", i, ".nex", sep=""))
+ }
> 
